package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.<br />
 * See GIT repository at: <a href="https://bitbucket.org/axelclk/symjaunittests">https://bitbucket.org/axelclk/symjaunittests</a>.
 */
public interface LaplaceTransformRules {
  final public static IAST RULES = List(
    ISetDelayed(LaplaceTransform(Times(a_,c_),t_,s_),
      Condition(Times(c,LaplaceTransform(a,t,s)),FreeQ(c,t))),
    ISetDelayed(LaplaceTransform(Times(a_,Power(t_,n_DEFAULT)),t_,s_),
      Condition(Times(Power(CN1,n),D(LaplaceTransform(a,t,s),List(s,n))),And(And(FreeQ(a,t),IntegerQ(n)),Greater(n,C0)))),
    ISetDelayed(LaplaceTransform(Times(a_DEFAULT,Power(E,Plus(b_DEFAULT,Times(c_DEFAULT,t_)))),t_,s_),
      Condition(LaplaceTransform(Times(a,Power(E,b)),t,Plus(s,Negate(c))),FreeQ(List(b,c),t))),
    ISetDelayed(LaplaceTransform(Sqrt(t_),t_,s_),
      Times(Sqrt(Pi),Power(Times(C2,Power(s,QQ(3L,2L))),-1))),
    ISetDelayed(LaplaceTransform(Sin(t_),t_,s_),
      Power(Plus(Sqr(s),C1),-1)),
    ISetDelayed(LaplaceTransform(Cos(t_),t_,s_),
      Times(s,Power(Plus(Sqr(s),C1),-1))),
    ISetDelayed(LaplaceTransform(Sinh(t_),t_,s_),
      Times(c,Power(Plus(Sqr(s),Negate(C1)),-1))),
    ISetDelayed(LaplaceTransform(Cosh(t_),t_,s_),
      Times(s,Power(Plus(Sqr(s),Negate(C1)),-1))),
    ISetDelayed(LaplaceTransform(Power(E,t_),t_,s_),
      Power(Plus(s,Negate(C1)),-1)),
    ISetDelayed(LaplaceTransform(Log(t_),t_,s_),
      Times(CN1,Plus(EulerGamma,Log(s)),Power(s,-1))),
    ISetDelayed(LaplaceTransform(Sqr(Log(t_)),t_,s_),
      Plus(Times(Sqr(Pi),Power(Times(C6,s),-1)),Times(Plus(EulerGamma,Log(s)),Power(s,-1)))),
    ISetDelayed(LaplaceTransform(Erf(t_),t_,s_),
      Times(Power(E,Times(C1D4,Sqr(s))),Erfc(Times(C1D2,s)),Power(s,-1))),
    ISetDelayed(LaplaceTransform(Erf(Sqrt(t_)),t_,s_),
      Power(Times(Sqrt(Plus(s,C1)),s),-1))
  );
}
